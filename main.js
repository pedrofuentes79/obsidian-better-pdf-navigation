/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

const Obsidian = require('obsidian');

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterPdfNavigationPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BetterPdfNavigationPlugin = class extends import_obsidian.Plugin {
  getActivePdfViewer() {
    const leaves = this.app.workspace.getLeavesOfType("pdf");
    const leaf = leaves.find((l) => l.containerEl?.classList?.contains("mod-active")) || leaves[0];
    const view = leaf?.view || null;
    return view ? view.viewer?.child?.pdfViewer ?? view.pdfViewer ?? view.viewer ?? null : null;
  }
  async onload() {
    console.log("Loading Better PDF Navigation plugin");
    this.addCommand({
      id: "pdf-next-page",
      name: "PDF: Next Page",
      hotkeys: [{ modifiers: [], key: "j" }],
      callback: () => {
        this.dispatchCommandToPdfViewer("nextpage");
      }
    });
    this.addCommand({
      id: "pdf-prev-page",
      name: "PDF: Previous Page",
      hotkeys: [{ modifiers: [], key: "k" }],
      callback: () => {
        this.dispatchCommandToPdfViewer("previouspage");
      }
    });
  }
  dispatchCommandToPdfViewer(directionCommand) {
    const pdfViewer = this.getActivePdfViewer();
    if (!pdfViewer) {
      console.log("No active PDF view");
      return;
    }
    try {
      pdfViewer.eventBus?.dispatch?.(directionCommand);
    } catch (error) {
      console.error("Error calling PDF navigation method:", error);
    }
  }
  onunload() {
    console.log("Unloading Better PDF Navigation plugin");
  }
};
